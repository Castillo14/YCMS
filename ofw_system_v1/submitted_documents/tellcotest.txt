1.Create a function that accepts an integer array. Return the second highest number in the array.
Example:
Array = {5, 3, 10, 6}
Output: 6


2. Create a function that will accept two arrays of integer . Display the combinations and the number of combination without the same value.
Example:
Array 1 = {1, 2, 3};
Array 2 = {2, 3, 4};
Output:
1,2
1,3
1,4
2,3
2,4
3,2
3,4
Combination: 7
	    string[] first = { "a", "b", "c" };
            string[] second = { "b", "c", "d" };
            List<string> finalArray = new List<string>();
            foreach (string x in first)
            {
                //finalArray.Add(x);
                foreach (string y in second)
                {
                    //finalArray.Add(y + x);
                    if (x != y)
                    {
                        finalArray.Add(y + x);
                        Console.WriteLine("{0}{1}", x, y);
                        
                        
                    }
                    //Console.WriteLine("{0}{1}", y, x);
                }
            }
            Console.WriteLine(finalArray.Count());
            Console.ReadLine();
3.Create a function that accepts an array of integer. Compute the integer average of the first half and second half, and return whichever is larger. Normally you would compute averages with doubles, but we use integer so the expected results are exact.
Example:
average({2,2,4,4})->4
average({5,5,5,2,2,2})->5
average({3,4,5,6,1,2,3,4})->4

4.Create a Boolean Function that will accept two non-negative integer values and return true if same last digit, such as 16,26.
Example:
isSameLastDigit(6,26) - true
isSameLastDigit(10,9) - false
isSameLastDigit(21,11) - true
isSameLastDigit(32,1) - false

5.Create a string Function that will accept an array of integers and will count the number of even and odd in the given array. Return the value as string.
Example:
int[] arrayOfInt = {1, 2, 3, 4, 5};
countEvenOdd(arrayOfInt)
"Number of even number2. Number of odd numbers 3."

6.Create a function that will accept an integer value and will return the factorial of the given integer.
Example:
factorial(6) - 720
factorial(2) - 2
factorial(1) - 1
factorial(9) - 362880

7.Create a Boolean Function accepts a non-empty array. Return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.
Example:
isEqual({1,2,3,1,0,2,3})->true
isEqual({2,3,4,1,2})->false
isEqual({10,10})->true

8.Create a function that accepts one integer array. Let's say that a "bundle" in an array is a series of 2 or more adjacent elements of the same value. Count and return the number of bundles in the given array.
Example:
countBundles{(2,2,1,1,1,2,1,1,2,2)} -> 4
countBundles{(1,1,1,1,1)} -> 1
countBundles{(0,0,2,2,1,1,1,2,1,1,2,2)} -> 5

9.Create a function that will make a package of goal kilos of chocolates. You have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming you always use big bars before small bars. Return -1 if it can't be done. Consider the sample output below:
Example:
packChocolate(small bars, big bars, goal)
packChocolate(6,1,12) -> -1
packChocolate(6,1,10) -> 5
packChocolate(6,2,10) -> 0
